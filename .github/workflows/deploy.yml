name: Deploy to EC2 via Terraform

on:
  push:
    branches:
      - master
    tags:
      - 'deploy-*'

  workflow_dispatch:
    inputs:
      stage:
        description: 'Deployment stage (dev, qa, prod)'
        required: true
        default: dev
        options:
          - dev
          - qa
          - prod

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Set Stage from Tag or Input
        id: set_stage
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_STAGE: ${{ github.event.inputs.stage }}
        run: |
          echo "Event: $EVENT_NAME"
          if [[ "${GITHUB_REF}" == refs/tags/deploy-* ]]; then
            STAGE="${GITHUB_REF#refs/tags/deploy-}"
          elif [[ "${EVENT_NAME}" == "workflow_dispatch" && -n "${INPUT_STAGE}" ]]; then
            STAGE="${INPUT_STAGE}"
          else
            echo "❌ Stage not provided via tag or input"
            exit 1
          fi
          echo "✅ Stage detected: $STAGE"
          echo "stage=$STAGE" >> "$GITHUB_OUTPUT"

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.6.0'

      - name: Terraform Init and Apply
        env:
          TF_VAR_github_token: ${{ secrets.GH_TOKEN }}
        run: |
          cd terraform
          terraform init
          terraform validate
          terraform apply -auto-approve \
            -var-file="${{ steps.set_stage.outputs.stage }}.json" \
            -var="stage=${{ steps.set_stage.outputs.stage }}" \
            -var="github_token=${{ secrets.GH_TOKEN }}"

      - name: Wait for EC2 to initialise and get IP
        id: get_ip
        run: |
          echo "Waiting for EC2 to initialise and get Public IP..."

          for i in {1..5}; do
           IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=MyInstance-${{ steps.set_stage.outputs.stage }}" \
            --query "Reservations[*].Instances[*].PublicIpAddress" --output text)

           if [[ -n "$IP" ]]; then
            echo "✅ EC2 IP acquired: $IP"
            echo "ip=$IP" >> "$GITHUB_OUTPUT"
            exit 0
           fi

           echo "Attempt $i: IP not available yet. Retrying in 60 seconds..."
           sleep 60
          done

          echo "❌ EC2 IP not available after retries."
          exit 1

      - name: Health Check - App on Port 80
        run: |
          IP=${{ steps.get_ip.outputs.ip }}

          echo "Waiting 2 more minutes for app to start fully..."
          sleep 120

          echo "--- Performing health check on http://$IP ..."
          for i in {1..5}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$IP)
            echo "Attempt $i: HTTP $STATUS"
            if [ "$STATUS" = "200" ]; then
              echo "✅ SUCCESS: App is healthy!"
              exit 0
            fi
            sleep 10
          done

          echo "❌ FAILURE: App failed health check after 5 tries."
          exit 1
